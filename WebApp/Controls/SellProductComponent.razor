@inject IGetProductById GetProductById
@inject ISellProductUseCase SellProductUseCase
@if (SelectedProduct != null)
{
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>
        <div class="form-group">
            <label for="name">Product Name</label>
            <input class="form-control" id="name" type="text" readonly value="@productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <input class="form-control" id="quantity" type="text" readonly value="@productToSell.Quantity" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}",productToSell.Price))" />
        </div>
        <div class="form-group">
            <label for="quantity">Quantity</label>
            <InputNumber id="qty" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <button type="submit" class="btn btn-primary">Sell</button>
    </EditForm>
    @if(!string.IsNullOrWhiteSpace(errorMessage)){
        <div class="alert alert-danger">@errorMessage</div>
    }
}
@code {
    private Product productToSell;
    private string errorMessage;
    [Parameter]
    public Product SelectedProduct { get; set; }
    [Parameter]
    public EventCallback<Product> OnProductSold{ get; set; }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (SelectedProduct != null)
        {
            productToSell = new Product
                {
                    ProductId = SelectedProduct.ProductId,
                    Name = SelectedProduct.Name,
                    CategoryId = SelectedProduct.CategoryId,
                    Quantity = 1,
                    Price = SelectedProduct.Price,
                };
        }
        else
        {
            productToSell = null;
        }
    }
    private void SellProduct()
    {
        var product = GetProductById.Execute(productToSell.ProductId);
        if(productToSell.Quantity <= 0)
        {
            errorMessage = "Quantity can't be less 1";
        }
        else if(product.Quantity >= productToSell.Quantity)
        {
            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(productToSell.ProductId, productToSell.Quantity);
        }
        else
        {
            errorMessage = $"{product.Name} only has {product.Quantity} left.";
        }

    }

}
