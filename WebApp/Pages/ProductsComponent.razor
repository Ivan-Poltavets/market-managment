@page "/products"

@using UseCases
@inject IViewProductsUseCase ViewProductsUseCase
@inject IGetCategoryById GetCategoryByIdUseCase
@inject NavigationManager NavigationManager
@inject IDeleteProduct DeleteProductUseCase
<h3>Products</h3>
<br />
<button type="button" class="btn btn-primary" @onclick="NavigateAddProduct">Add product</button>
@if(products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in products)
            {
                <tr>
                    <td>@GetCategoryByIdUseCase.Execute(product.CategoryId.Value)?.Name</td>
                    <td>@product.Name</td>
                    <td>@(Math.Round(product.Price))</td>
                    <td>@product.Quantity</td>
                    <td><button type="button" class="btn btn-toolbar" @onclick = "()=>EditProduct(product)">Edit</button></td>
                    <td><button type="button" class="btn btn-close" @onclick = "()=>DeleteProduct(product.ProductId)"></button></td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Product> products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        products = ViewProductsUseCase.Execute();
    }
    private void NavigateAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }
    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editproduct/{product.ProductId}");
    }
    private void DeleteProduct(int productId)
    {
        DeleteProductUseCase.Delete(productId);
    }
}
